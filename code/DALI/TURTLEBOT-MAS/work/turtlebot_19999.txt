:- use_module(library(file_systems)).
:- use_module(library(system)).

:- compile('../mas/redis_client.pl').
:- compile('../mas/stringESE').

:- dynamic vision/2.
:- dynamic depth/1.
:- dynamic load/1.
:- dynamic agentname/1.


% obstacle avoidance: if the unit has somthing near that is not the target
avoid :- depth(near), not(vision(_,near)).
avoidI :> answer('right:90').

% stop: if the unit is near the green conveyor belt and it is full
stop :- vision(green,near), load(full).
% stop: if the unit is near the red conveyor belt and it is empty
stop :- vision(red, near), load(empty).
stopI :> answer('stop').

% turn: if the unit sees the conveyor belt to one of its sides
turn(X) :- vision(_,X), depth(far).
turnI(X):- append(X, ':30', Res), answer(Res).

% go: if the unit sees the convayor belt in front of it
go :- vision(_, center), depth(far).
go :> answer('go:2').

% goBack: if the unit is near the green convayor belt and it is empty, so it has to go to take another pack
goBack :- vision(green,near), load(empty).
% goBack: if the unit is near the red convayor belt and it is full, so it has to go to download the pack
goBack :- vision(red,near), load(full).
goBack :> answer('right:180').

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% received message must be of the form 'predicate. predicate. ...'
% external event triggered by the arrival of a message
redisE(X) :> print('Received message: '),
             pulisciStringa(X, Clean),
             print(Clean), nl, addKnowledge(Clean).

% add information to the kb by creating a new .pl file and compiling it
addKnowledge(S) :-
    open('addedKnowledge.pl', write, W),
    write(W, S),
    close(W),
    compile('addedKnowledge.pl').

% incapsulate the answer procedure (send and kb cleaning)
answer(X) :- name(N),
             append(N,X,Res),
             mas_send(Res),
             print('action: '),
             print(X),
             nl,
             retractall(vision(_,_)),
             retractall(depth(_)),
             retractall(load(_)).

