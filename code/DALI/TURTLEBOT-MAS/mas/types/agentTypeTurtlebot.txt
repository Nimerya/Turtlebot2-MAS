:- use_module(library(file_systems)).
:- use_module(library(system)).

:- compile('../mas/redis_client.pl').
:- compile('../../stringESE.pl').

:- dynamic vision/2.
:- dynamic depth/1.
:- dynamic load/1.

% received message must be of the form 'predicate. predicate. ...'

% external event triggered by the arrival of a message
redisE(X) :> print('Received message: '),
             pulisciStringa(X, Clean),
             print(Clean), nl, addKnowledge(Clean).

% add information to the kb by creating a new .pl file and compiling it
addKnowledge(S) :-
    open('addedKnowledge.pl', write, W),
    write(W, S),
    close(W),
    compile('addedKnowledge.pl').

% incapsulate the answer procedure (send and kb cleaning)
answer(X) :- mas_send(X),
             retractall(vision(_,_)),
             retractall(depth(_)),
             retractall(load(_)).

